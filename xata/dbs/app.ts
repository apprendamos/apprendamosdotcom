// Generated by Xata Codegen 0.21.0. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "Profile",
    columns: [
      { name: "username", type: "string", unique: true },
      {
        name: "name",
        type: "string",
        notNull: true,
        defaultValue: "Anthony Cueva",
      },
      { name: "bio", type: "string" },
      { name: "birthdate", type: "datetime" },
      { name: "follower_count", type: "int", notNull: true, defaultValue: "0" },
      {
        name: "following_count",
        type: "int",
        notNull: true,
        defaultValue: "0",
      },
      { name: "image", type: "string" },
      { name: "like_count", type: "int", notNull: true, defaultValue: "0" },
      { name: "article_count", type: "int", notNull: true, defaultValue: "0" },
    ],
  },
  {
    name: "Article",
    columns: [
      { name: "hashtags", type: "multiple" },
      { name: "author", type: "link", link: { table: "Profile" } },
      {
        name: "body",
        type: "text",
        notNull: true,
        defaultValue: "# Hello world!",
      },
      { name: "like_count", type: "int", notNull: true, defaultValue: "0" },
      {
        name: "publication_date",
        type: "datetime",
        notNull: true,
        defaultValue: "2001-11-30T01:02:03.004Z",
      },
      { name: "star_count", type: "int", notNull: true, defaultValue: "0" },
      { name: "bookmark_count", type: "int", notNull: true, defaultValue: "0" },
      { name: "children_count", type: "int", notNull: true, defaultValue: "0" },
      { name: "comment_count", type: "int", notNull: true, defaultValue: "0" },
      { name: "parent", type: "link", link: { table: "Article" } },
      {
        name: "is_question",
        type: "bool",
        notNull: true,
        defaultValue: "false",
      },
    ],
  },
  {
    name: "ProfileArticle",
    columns: [
      { name: "article", type: "link", link: { table: "Article" } },
      { name: "like_status", type: "bool", defaultValue: "false" },
      { name: "profile", type: "link", link: { table: "Profile" } },
      { name: "comment_count", type: "int", notNull: true, defaultValue: "0" },
      { name: "children_count", type: "int", notNull: true, defaultValue: "0" },
      { name: "star_count", type: "int", notNull: true, defaultValue: "0" },
    ],
  },
  {
    name: "Account",
    columns: [
      { name: "type", type: "string" },
      { name: "provider", type: "string" },
      { name: "access_token", type: "string" },
      { name: "token_type", type: "string" },
      { name: "scope", type: "string" },
      { name: "id_token", type: "string" },
      { name: "session_state", type: "string" },
      { name: "oauth_token_secret", type: "string" },
      { name: "oauth_token", type: "string" },
      { name: "user", type: "link", link: { table: "User" } },
      { name: "providerAccountId", type: "string", unique: true },
      { name: "refresh_token", type: "string" },
      { name: "expires_at", type: "int" },
      { name: "userId", type: "string" },
    ],
  },
  {
    name: "Comment",
    columns: [
      { name: "like_count", type: "int", notNull: true, defaultValue: "0" },
      { name: "body", type: "string", notNull: true, defaultValue: "sasd" },
      {
        name: "publication_date",
        type: "datetime",
        notNull: true,
        defaultValue: "2022-11-17T00:00:00Z",
      },
      { name: "author", type: "link", link: { table: "Profile" } },
      { name: "article", type: "link", link: { table: "Article" } },
    ],
  },
  {
    name: "FollowerFollowee",
    columns: [
      { name: "follower", type: "link", link: { table: "Profile" } },
      { name: "followee", type: "link", link: { table: "Profile" } },
      {
        name: "creation_date",
        type: "datetime",
        notNull: true,
        defaultValue: "2022-12-20T01:11:01.001Z",
      },
      { name: "following_status", type: "bool" },
    ],
  },
  {
    name: "Cheer",
    columns: [
      { name: "sponsor", type: "link", link: { table: "Profile" } },
      { name: "article", type: "link", link: { table: "Article" } },
      { name: "message", type: "string" },
    ],
  },
  {
    name: "User",
    columns: [
      { name: "email", type: "email", unique: true },
      {
        name: "profile",
        type: "link",
        link: { table: "Profile" },
        unique: true,
      },
      { name: "blocked_status", type: "bool", defaultValue: "false" },
      { name: "emailVerified", type: "datetime" },
    ],
  },
  {
    name: "Session",
    columns: [
      { name: "user", type: "link", link: { table: "User" } },
      { name: "expires", type: "datetime" },
      { name: "sessionToken", type: "string" },
      { name: "userId", type: "string" },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Profile = InferredTypes["Profile"];
export type ProfileRecord = Profile & XataRecord;

export type Article = InferredTypes["Article"];
export type ArticleRecord = Article & XataRecord;

export type ProfileArticle = InferredTypes["ProfileArticle"];
export type ProfileArticleRecord = ProfileArticle & XataRecord;

export type Account = InferredTypes["Account"];
export type AccountRecord = Account & XataRecord;

export type Comment = InferredTypes["Comment"];
export type CommentRecord = Comment & XataRecord;

export type FollowerFollowee = InferredTypes["FollowerFollowee"];
export type FollowerFolloweeRecord = FollowerFollowee & XataRecord;

export type Cheer = InferredTypes["Cheer"];
export type CheerRecord = Cheer & XataRecord;

export type User = InferredTypes["User"];
export type UserRecord = User & XataRecord;

export type Session = InferredTypes["Session"];
export type SessionRecord = Session & XataRecord;

export type DatabaseSchema = {
  Profile: ProfileRecord;
  Article: ArticleRecord;
  ProfileArticle: ProfileArticleRecord;
  Account: AccountRecord;
  Comment: CommentRecord;
  FollowerFollowee: FollowerFolloweeRecord;
  Cheer: CheerRecord;
  User: UserRecord;
  Session: SessionRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://anthony-cueva-s-workspace-iae285.us-east-1.xata.sh/db/apprendamos",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
