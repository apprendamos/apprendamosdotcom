// Generated by Xata Codegen 0.18.0. Please do not edit.
import {
  BaseClientOptions,
  buildClient,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "profiles",
    columns: [
      { name: "username", type: "string", unique: true },
      {
        name: "name",
        type: "string",
        notNull: true,
        defaultValue: "Anthony Cueva",
      },
      { name: "bio", type: "string" },
      { name: "birthdate", type: "datetime" },
      { name: "follower_count", type: "int", notNull: true, defaultValue: "0" },
      {
        name: "following_count",
        type: "int",
        notNull: true,
        defaultValue: "0",
      },
    ],
  },
  {
    name: "questions",
    columns: [
      { name: "hashtags", type: "multiple" },
      { name: "author", type: "link", link: { table: "profiles" } },
      {
        name: "body",
        type: "text",
        notNull: true,
        defaultValue: "# Hello world!",
      },
      { name: "like_count", type: "int", notNull: true, defaultValue: "0" },
      {
        name: "publication_date",
        type: "datetime",
        notNull: true,
        defaultValue: "2001-11-30T01:02:03.004Z",
      },
    ],
  },
  {
    name: "user_question_rels",
    columns: [
      { name: "user", type: "link", link: { table: "profiles" } },
      { name: "question", type: "link", link: { table: "questions" } },
      { name: "like_status", type: "bool", defaultValue: "false" },
    ],
  },
  {
    name: "accounts",
    columns: [
      { name: "user", type: "link", link: { table: "profiles" }, unique: true },
      { name: "blocked_status", type: "bool", defaultValue: "false" },
      { name: "password", type: "string", notNull: true, defaultValue: "hol0" },
    ],
  },
  {
    name: "mail_connections",
    columns: [
      { name: "email", type: "email", unique: true },
      { name: "account", type: "link", link: { table: "accounts" } },
    ],
  },
  {
    name: "phone_connections",
    columns: [
      { name: "prefix", type: "int", notNull: true, defaultValue: "51" },
      { name: "number", type: "int", notNull: true, defaultValue: "959132247" },
      { name: "account", type: "link", link: { table: "accounts" } },
    ],
  },
  {
    name: "comments",
    columns: [
      { name: "like_count", type: "int", notNull: true, defaultValue: "0" },
      { name: "body", type: "string", notNull: true, defaultValue: "sasd" },
      {
        name: "publication_date",
        type: "datetime",
        notNull: true,
        defaultValue: "2022-11-17T00:00:00Z",
      },
      { name: "author", type: "link", link: { table: "profiles" } },
      { name: "question", type: "link", link: { table: "questions" } },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Profiles = InferredTypes["profiles"];
export type ProfilesRecord = Profiles & XataRecord;

export type Questions = InferredTypes["questions"];
export type QuestionsRecord = Questions & XataRecord;

export type UserQuestionRels = InferredTypes["user_question_rels"];
export type UserQuestionRelsRecord = UserQuestionRels & XataRecord;

export type Accounts = InferredTypes["accounts"];
export type AccountsRecord = Accounts & XataRecord;

export type MailConnections = InferredTypes["mail_connections"];
export type MailConnectionsRecord = MailConnections & XataRecord;

export type PhoneConnections = InferredTypes["phone_connections"];
export type PhoneConnectionsRecord = PhoneConnections & XataRecord;

export type Comments = InferredTypes["comments"];
export type CommentsRecord = Comments & XataRecord;

export type DatabaseSchema = {
  profiles: ProfilesRecord;
  questions: QuestionsRecord;
  user_question_rels: UserQuestionRelsRecord;
  accounts: AccountsRecord;
  mail_connections: MailConnectionsRecord;
  phone_connections: PhoneConnectionsRecord;
  comments: CommentsRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://anthony-cueva-s-workspace-iae285.us-east-1.xata.sh/db/apprendamos",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
